syntax = "proto3";

package rb.api;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "rb/api/geometry.proto";
import "rb/api/command_header.proto";

message StopCommand {
  message Request {
    CommandHeader.Request command_header = 1;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;
  }
}

message SE2VelocityCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    google.protobuf.Duration minimum_time = 2;

    SE2Velocity velocity = 3;

    SE2Velocity acceleration_limit = 4;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;
  }
}

message JogCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    string joint_name = 2;

    google.protobuf.DoubleValue velocity_limit = 3; // (rad/s) (optional)

    google.protobuf.DoubleValue acceleration_limit = 4; // (rad/s^2) (optional)

    oneof command {
      double absolute_position = 5; // (rad)

      double relative_position = 6; // (rad) current position + relative position

      bool one_step = 7; // 5 deg, true is positive move, false is negative move
    }
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    string target_joint_name = 2;
  }
}

message JointVelocityCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    google.protobuf.Duration minimum_time = 2;

    repeated double velocity = 3;

    repeated double acceleration_limit = 4;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;
  }
}

message JointPositionCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    google.protobuf.Duration minimum_time = 2;

    repeated double position = 3;

    repeated double velocity_limit = 4;

    repeated double acceleration_limit = 5;

    reserved 10; // ``cutoff_frequency`` is moved to Parameter
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    double time_based_progress = 2; // [0, 1]

    double position_based_progress = 3; // (-inf, 1]
  }
}

message CartesianCommand {
  message SE3PoseTarget {
    string ref_link_name = 1;

    string link_name = 2;

    SE3Pose T = 3;

    google.protobuf.DoubleValue linear_velocity_limit = 4; // (m/s)

    google.protobuf.DoubleValue angular_velocity_limit = 5; // (rad/s)

    // default.linear_acceleration_limit * acceleration_limit_scaling
    // default.angular_acceleration_limit * acceleration_limit_scaling
    //
    google.protobuf.DoubleValue acceleration_limit_scaling = 6; // `(0, 1]`
  }

  message JointPositionTarget {
    string joint_name = 1;

    double target_position = 2;

    google.protobuf.DoubleValue velocity_limit = 3;

    google.protobuf.DoubleValue acceleration_limit = 4;
  }

  message TrackingError {
    double position_error = 1;

    double orientation_error = 2;
  }

  message Request {
    CommandHeader.Request command_header = 1;

    google.protobuf.Duration minimum_time = 2;

    repeated SE3PoseTarget targets = 3;

    repeated JointPositionTarget joint_position_targets = 10;

    google.protobuf.DoubleValue stop_position_tracking_error = 4;

    google.protobuf.DoubleValue stop_orientation_tracking_error = 5;

    google.protobuf.DoubleValue stop_joint_position_tracking_error = 6;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    repeated TrackingError se3_pose_tracking_errors = 2;

    repeated double joint_position_tracking_errors = 3;

    double remain_time = 4;

    double manipulability = 5;
  }
}

message GravityCompensationCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    bool on = 2;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;
  }
}

message ImpedanceControlCommand {
  message TrackingError {
    double position_error = 1;

    double rotation_error = 2;
  }

  message Request {
    CommandHeader.Request command_header = 1;

    string ref_link_name = 3;

    string link_name = 4;

    SE3Pose T = 5;

    Vec3 translation_weight = 6;

    Vec3 rotation_weight = 7;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    TrackingError tracking_error = 2;
  }
}

message OptimalControlCommand {
  message CartesianCost {
    string ref_link_name = 1;

    string link_name = 2;

    SE3Pose T = 3;

    double translation_weight = 4; // default = 1

    double rotation_weight = 5; // default = 1
  }

  message CenterOfMassCost {
    string ref_link_name = 1;

    Vec3 pose = 2;

    double weight = 3; // default = 1
  }

  message JointPositionCost {
    string joint_name = 1;

    double target_position = 2;

    double weight = 3;
  }

  message Request {
    CommandHeader.Request command_header = 1;

    repeated CartesianCost cartesian_costs = 2;

    CenterOfMassCost center_of_mass_cost = 3;

    repeated JointPositionCost joint_position_costs = 4;

    // velocity scaling factor: qdot_limit * default.velocity_limit_scaling * velocity_limit_scaling
    // default: 1.0, range: (0, 1]
    google.protobuf.DoubleValue velocity_limit_scaling = 5;

    // acceleration scaling factor: qddot_limit * default.acceleration_limit_scaling * acceleration_limit_scaling
    // default: 1.0, range: (0, ∞)
    google.protobuf.DoubleValue acceleration_limit_scaling = 10;

    // velocity tracking gain
    // default: default.optimal_control_command.velocity_tracking_gain, range: (0, 1]
    // DEPRECATED since 0.4.3
    // For robots prior to version 0.4.1, differences in the optimization method may cause unintended behavior if the value is used.
    // Therefore, to prevent this issue, this value is forcibly set to 0.
    google.protobuf.DoubleValue velocity_tracking_gain = 6;

    // Like step size, range: (0, ∞)
    google.protobuf.DoubleValue error_scaling = 11;

    // stop cost
    // default: default.optimal_control_command.stop_cost, range: (0, ∞)
    google.protobuf.DoubleValue stop_cost = 7;

    // minimum delta cost, optional, range: (0, ∞)
    google.protobuf.DoubleValue min_delta_cost = 8;

    // patience parameter, optional, range: (0, ∞)
    google.protobuf.Int32Value patience = 9;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    double total_cost = 2;

    repeated double cartesian_costs = 3;

    double center_of_mass_cost = 4;

    repeated double joint_position_costs = 5;
  }
}

message RealTimeControlCommand {
  message Request {
    CommandHeader.Request command_header = 1;

    uint32 port = 2;
  }

  message Feedback {
    CommandHeader.Feedback command_header_feedback = 1;

    reserved 2;

    reserved 3;
  }
}
